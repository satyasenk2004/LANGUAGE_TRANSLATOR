# -*- coding: utf-8 -*-
"""Copy of translation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qeJzwjac--X2cAyaSA_mOAbeGp8m1o6t
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import string
from string import digits
import re
import os
from numpy import array, argmax, random, take
from sklearn.model_selection import train_test_split
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Embedding, RepeatVector,TimeDistributed
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping,ReduceLROnPlateau
from tensorflow.keras.models import load_model
from tensorflow.keras import optimizers
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import drive
drive.mount('/content/drive')

english_sentances = []
telugu_sentances = []
with open("/content/drive/MyDrive/english_telugu_data.txt", mode='rt', encoding='utf-8') as fp:
    for line in fp.readlines():
        eng_tel = line.split("++++$++++")
        english_sentances.append(eng_tel[0])
        telugu_sentances.append(eng_tel[1])

data = pd.DataFrame({"english_sentances":english_sentances,"telugu_sentances":telugu_sentances})

data.head()

data.shape

data = data.iloc[:70000,:]

contraction_mapping = {"ain't": "is not", "aren't": "are not","can't": "cannot", "'cause": "because", "could've": "could have", "couldn't": "could not",
                           "didn't": "did not",  "doesn't": "does not", "don't": "do not", "hadn't": "had not", "hasn't": "has not", "haven't": "have not",
                           "he'd": "he would","he'll": "he will", "he's": "he is", "how'd": "how did", "how'd'y": "how do you", "how'll": "how will", "how's": "how is",
                           "I'd": "I would", "I'd've": "I would have", "I'll": "I will", "I'll've": "I will have","I'm": "I am", "I've": "I have", "i'd": "i would",
                           "i'd've": "i would have", "i'll": "i will",  "i'll've": "i will have","i'm": "i am", "i've": "i have", "isn't": "is not", "it'd": "it would",
                           "it'd've": "it would have", "it'll": "it will", "it'll've": "it will have","it's": "it is", "let's": "let us", "ma'am": "madam",
                           "mayn't": "may not", "might've": "might have","mightn't": "might not","mightn't've": "might not have", "must've": "must have",
                           "mustn't": "must not", "mustn't've": "must not have", "needn't": "need not", "needn't've": "need not have","o'clock": "of the clock",
                           "oughtn't": "ought not", "oughtn't've": "ought not have", "shan't": "shall not", "sha'n't": "shall not", "shan't've": "shall not have",
                           "she'd": "she would", "she'd've": "she would have", "she'll": "she will", "she'll've": "she will have", "she's": "she is",
                           "should've": "should have", "shouldn't": "should not", "shouldn't've": "should not have", "so've": "so have","so's": "so as",
                           "this's": "this is","that'd": "that would", "that'd've": "that would have", "that's": "that is", "there'd": "there would",
                           "there'd've": "there would have", "there's": "there is", "here's": "here is","they'd": "they would", "they'd've": "they would have",
                           "they'll": "they will", "they'll've": "they will have", "they're": "they are", "they've": "they have", "to've": "to have",
                           "wasn't": "was not", "we'd": "we would", "we'd've": "we would have", "we'll": "we will", "we'll've": "we will have", "we're": "we are",
                           "we've": "we have", "weren't": "were not", "what'll": "what will", "what'll've": "what will have", "what're": "what are",
                           "what's": "what is", "what've": "what have", "when's": "when is", "when've": "when have", "where'd": "where did", "where's": "where is",
                           "where've": "where have", "who'll": "who will", "who'll've": "who will have", "who's": "who is", "who've": "who have",
                           "why's": "why is", "why've": "why have", "will've": "will have", "won't": "will not", "won't've": "will not have",
                           "would've": "would have", "wouldn't": "would not", "wouldn't've": "would not have", "y'all": "you all",
                           "y'all'd": "you all would","y'all'd've": "you all would have","y'all're": "you all are","y'all've": "you all have",
                           "you'd": "you would", "you'd've": "you would have", "you'll": "you will", "you'll've": "you will have",
                           "you're": "you are", "you've": "you have"}

def clean_eng(text):

    text = text.lower()

    text = ' '.join([contraction_mapping[w] if w in contraction_mapping else w for w in text.split(" ")])

    text = re.sub("'", '', text)

    exclude = set(string.punctuation)
    text = ''.join([c for c in text if c not in exclude])

    remove_digits = str.maketrans('', '', digits)
    text = text.translate(remove_digits)

    text= text.strip()

    return text

def clean_tel(text):

    text = text.lower()

    text = re.sub("'", '', text)

    exclude = set(string.punctuation)
    text = ''.join([c for c in text if c not in exclude])

    remove_digits = str.maketrans('', '', digits)
    text = text.translate(remove_digits)

    text = re.sub("[౦౧౨౩౪౫౬౭౮౯]", '', text)

    text= text.strip()

    return text

def clean_tel(text):

    text = text.lower()

    text = re.sub("'", '', text)

    exclude = set(string.punctuation)
    text = ''.join([c for c in text if c not in exclude])

    remove_digits = str.maketrans('', '', digits)
    text = text.translate(remove_digits)

    text = re.sub("[౦౧౨౩౪౫౬౭౮౯]", '', text)

    text= text.strip()

    return text

data_df = data.copy()
data_df["english_sentances"] = data_df["english_sentances"] .apply(lambda x: clean_eng(x))
data_df["telugu_sentances"] = data_df["telugu_sentances"] .apply(lambda x: clean_tel(x))

data_df.head()

eng_l = []
tel_l = []

for i in data_df["english_sentances"].values:
      eng_l.append(len(i.split()))

for i in data_df["telugu_sentances"].values:
      tel_l.append(len(i.split()))

length_df = pd.DataFrame({'eng':eng_l, 'tel':tel_l})

length_df.hist(bins = 30)
plt.show()

def tokenization(lines):
    tokenizer = Tokenizer()
    tokenizer.fit_on_texts(lines)
    return tokenizer

eng_tokenizer = tokenization(data_df["english_sentances"])
eng_vocab_size = len(eng_tokenizer.word_index) + 1

eng_length = 43
print('English Vocabulary Size: %d' % eng_vocab_size)

tel_tokenizer = tokenization(data_df["telugu_sentances"])
tel_vocab_size = len(tel_tokenizer.word_index) + 1

tel_length = 26
print('Telugu Vocabulary Size: %d' % tel_vocab_size)

def encode_sequences(tokenizer, length, lines):

    seq = tokenizer.texts_to_sequences(lines)

    seq = pad_sequences(seq, maxlen=length, padding='post')
    return seq

train, test = train_test_split(data_df, test_size=0.2, random_state = 12)

trainX = encode_sequences(eng_tokenizer, eng_length, train["english_sentances"])
trainY = encode_sequences(tel_tokenizer, tel_length, train["telugu_sentances"])


testX = encode_sequences(eng_tokenizer, eng_length, test["english_sentances"])
testY = encode_sequences(tel_tokenizer, tel_length, test["telugu_sentances"])

trainX

trainX.shape,trainY.shape,testX.shape,testY.shape

def define_model(in_vocab,out_vocab, in_timesteps,out_timesteps,units):
    model = Sequential()
    model.add(Embedding(in_vocab, units, input_length=in_timesteps, mask_zero=True))
    model.add(LSTM(units))
    model.add(RepeatVector(out_timesteps))
    model.add(LSTM(units, return_sequences=True))
    model.add(TimeDistributed(Dense(out_vocab, activation='softmax')))
    return model

model = define_model(eng_vocab_size,tel_vocab_size,eng_length,tel_length, 512)
model.summary()

rms = optimizers.RMSprop()
model.compile(optimizer=rms, loss='sparse_categorical_crossentropy')

filepath = '/content/drive'+'NMT_model.keras'
checkpoint = ModelCheckpoint(filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')

reduce_alpha = ReduceLROnPlateau(monitor ='val_loss', factor = 0.2, patience = 1, min_lr = 0.001)

callbacks = [checkpoint, reduce_alpha]

history = model.fit(trainX, trainY.reshape(trainY.shape[0], trainY.shape[1], 1),
                    epochs=3, batch_size=128, validation_split = 0.2,callbacks=callbacks, verbose=1)

import keras

model = keras.saving.load_model(filepath)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.legend(['train','validation'])
plt.show()

idx = random.randint(testX.shape[0], size=10)

encoded_english_actual = testX[idx,:]

eng_actual = test["english_sentances"].values
eng_actual = eng_actual[idx]

actual = test["telugu_sentances"].values
actual = actual[idx]

preds = model.predict(encoded_english_actual.reshape((encoded_english_actual.shape[0],encoded_english_actual.shape[1])))

def get_word(n, tokenizer):
    for word, index in tokenizer.word_index.items():
        if index == n:
            return word
    return None

import numpy as np

def get_word(n, tokenizer):
    for word, index in tokenizer.word_index.items():
        if index == n:
            return word
    return None

preds = model.predict(encoded_english_actual)


if preds.ndim == 3:
    preds = np.argmax(preds, axis=-1)


decoded_sentences = []
for pred in preds:
    sentence = []
    for token_index in pred:
        if token_index == 0:
            break
        word = get_word(token_index, tel_tokenizer)
        if word is not None:
            sentence.append(word)
    decoded_sentences.append(' '.join(sentence))


for i in range(5):
    print(f"English: {' '.join([get_word(idx, eng_tokenizer) for idx in encoded_english_actual[i] if idx != 0])}")
    print(f"Predicted Telugu: {decoded_sentences[i]}")
    print()
